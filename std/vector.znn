
export embed {

#include <vector>
using std::vector;
#include <algorithm>
}

export import "std/concepts.znn";
export import "std/range.znn";
export import "std/inequality_adapter.znn";

export template <T>
extern struct vector;

export template <T> requires (known_size(T))
void destruct(vector<T>* v) {
  for (it : *v)
    it^.destruct();
}

export template <T>
extern vector();

export template <T> requires copy<T>
vector(int count, T elem) {
  mutable ret = vector<T>();
  ret.reserve(count);
  for (i : range(0, count))
    ret.push_back(elem.copy());
  return move(ret);
}

export template <T>
struct vector_iterator {
  vector<T>* v;
  int index;
};

export template <T>
vector_iterator<T> implicit_copy(vector_iterator<T>*) = default;

export template <T>
struct vector_mut_iterator {
  vector<T> mutable* v;
  int index;
};

export template <T>
vector_mut_iterator<T> implicit_copy(vector_mut_iterator<T>*) = default;

export template <T>
vector_iterator<T> begin(vector<T>* v) {
  return vector_iterator(v, 0);
}

export template <T>
vector_iterator<T> end(vector<T>* v) {
  return vector_iterator(v, v^.size());
}

export template <T>
T* operator *(vector_iterator<T>* it) {
  return &(*it^.v)[it^.index];
}

export template <T>
vector_iterator<T> operator ++(vector_iterator<T> mutable* it) {
  ++it^.index;
  return *it;
}

export template <T>
bool operator == (vector_iterator<T>* it1, vector_iterator<T>* it2) {
  return it1^.index == it2^.index;
}

export template <T>
vector_mut_iterator<T> begin(vector<T> mutable* v) {
  return vector_mut_iterator(v, 0);
}

export template <T>
vector_mut_iterator<T> end(vector<T> mutable* v) {
  return vector_mut_iterator(v, v^.size());
}


export template <T>
T mutable* operator *(vector_mut_iterator<T>* it) {
  return &(*it^.v)[it^.index];
}

export template <T>
vector_mut_iterator<T> operator ++(vector_mut_iterator<T> mutable* it) {
  ++it^.index;
  return *it;
}

export template <T>
bool operator == (vector_mut_iterator<T>* it1, vector_mut_iterator<T>* it2) {
  return it1^.index == it2^.index;
}

export template <T>
void clear(vector<T> mutable* v) {
  for (it : *v)
    it^.destruct();
  embed {
    v->clear();
  }
}

export template <T>
void reverse(vector<T> mutable* v) {
  embed {
    std::reverse(v->begin(), v->end());
  }
}

export [@member] template <T>
extern void push_back(vector<T> mutable* v, T elem);

export template <T>
T pop_back(vector<T> mutable* v) {
  embed {
    T t = std::move(v->back());
    v->pop_back();
    return std::move(t);
  }
}

export [@member] template <T>
extern T* operator [](vector<T>* v, int index);

export [@member] template <T>
extern T mutable* operator [](vector<T> mutable* v, int index);

export template <T>
T* back(vector<T>* v) {
  return &(*v)[v^.size() - 1];
}

export template <T>
T mutable* back(vector<T> mutable* v) {
  return &(*v)[v^.size() - 1];
}

export template <T>
T* front(vector<T>* v) {
  return &(*v)[0];
}

export template <T>
T mutable* front(vector<T> mutable* v) {
  return &(*v)[0];
}

export template <T>
int size(vector<T>* v) {
  embed {
    return v->size();
  }
}

export [@member] template <T>
extern bool empty(vector<T>* v);

export template <T> requires copy<T>
vector<T> copy(vector<T>* v) {
  mutable ret = vector<T>();
  for (elem : *v)
    ret.push_back(elem^.copy());
  return move(ret);
}

export template <T> requires equality<T>
bool operator == (vector<T>* v1, vector<T>* v2) {
  return v1^.slice() == v2^.slice();
}

export template <T> requires get_hash<T>
int get_hash(vector<T>* v) {
  return v^.slice().get_hash();
}

export template <T> requires inequality<T>
void sort(vector<T> mutable* v) {
  embed {
    std::sort(v->begin(), v->end(), inequality_adapter<T>());
  }
  return;
  discard inequality_adapter<T>().invoke(&(*v)[0], &(*v)[0]);
}

export template <T, Fun> requires invoke<Fun, bool, T*, T*>
void sort(vector<T> mutable* v, Fun* fun) {
  embed {
    std::sort(v->begin(), v->end(), [&](const T& t1, const T& t2){ return invoke(fun, &t1, &t2); } );
  }
}

export template <T, U> requires equality2<T, U>
int? find(vector<T>* v, U* elem) {
  for (i : range(0, v^.size()))
    if ((*v)[i] == *elem)
      return i;
  return null;
}

export template <T>
void remove(vector<T> mutable* v, int index) {
  embed {
    v->erase(v->begin() + index);
  }
}

export template <T, int Sz>
vector<T> as_vector(mutable T[Sz] array) {
  mutable ret = vector<T>();
  for (it : array)
    embed {
    ret.push_back(std::move(*it.elem));
    }
  set_moved_in_embed(move(array));
  return move(ret);
}

export template <T>
T[] slice(vector<T>* v) {
  embed {
    return slice_t<T>{&v->front(), &v->back() + 1};
  }
}

export template <T>
T mutable[] slice(vector<T> mutable* v) {
  embed {
    return mutable_slice_t<T>{&v->front(), &v->back() + 1};
  }
}

export [@member] template<T>
extern void reserve(vector<T> mutable* v, int cnt);

export template <U, T, Fun> requires invoke<Fun, U, T*>
vector<U> transform(vector<T>* v, Fun f) {
  mutable ret = vector<U>();
  ret.reserve(v^.size());
  for (it : *v)
    ret.push_back(f(&*it));
  return move(ret);
}

export template <T, Fun> requires invoke<Fun, bool, T*>, copy<T>
vector<T> filter(vector<T>* v, Fun f) {
  mutable ret = vector<T>();
  for (it : *v)
    if (f(&*it))
      ret.push_back(it^.copy());
  return move(ret);
}

export template<T>
void erase(vector<T> mutable* v, int index, int count) {
  embed {
    v->erase(v->begin() + index, v->begin() + index + count);
  }
}

export template<T>
void insert(vector<T> mutable* v, int index, vector<T>* content) {
  embed {
    v->insert(v->begin() + index, content->begin(), content->end());
  }
}

export template<T>
void insert(vector<T> mutable* v, int index, T elem) {
  set_moved_in_embed(move(elem));
  embed {
    v->insert(v->begin() + index, std::move(elem));
  }
}

export template<T>
void append(vector<T> mutable* v, vector<T> content) {
  set_moved_in_embed(move(content));
  embed {
    for (auto& elem : content)
      v->push_back(std::move(elem));
  }
}

