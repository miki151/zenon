
export embed {

#include <vector>
using std::vector;
#include <algorithm>
}

export import "std/concepts.znn";
export import "std/range.znn";

export template <T>
extern struct vector;

export template <T>
void destruct(vector<T>* v) {
  for (it : *v)
    it->destruct();
}

export template <T>
extern vector();

export template <T>
struct vector_iterator {
  T* elem;
  int index;
};

export template <T>
struct vector_mut_iterator {
  T mutable* elem;
  int index;
};

export template <T>
vector_iterator<T> begin(vector<T>* v) {
  embed {
    return {&(*v)[0], 0};
  }
}

export template <T>
vector_iterator<T> end(vector<T>* v) {
  const size = v->size();
  embed {
    return {&(*v)[v->size()], size};
  }
}

export template <T>
T* operator *(vector_iterator<T>* it) {
  return it->elem;
}

export template <T>
vector_iterator<T> operator ++(vector_iterator<T> mutable* it) {
  embed {
    return {++it->elem, ++it->index};
  }
}

export template <T>
bool operator == (vector_iterator<T>* it1, vector_iterator<T>* it2) {
  embed {
    return it1->elem == it2->elem;
  }
}

export template <T>
vector_mut_iterator<T> begin(vector<T> mutable* v) {
  embed {
    return {&(*v)[0], 0};
  }
}

export template <T>
vector_mut_iterator<T> end(vector<T> mutable* v) {
  const size = v->size();
  embed {
    return {&(*v)[v->size()], size};
  }
}


export template <T>
T mutable* operator *(vector_mut_iterator<T>* it) {
  return it->elem;
}

export template <T>
vector_mut_iterator<T> operator ++(vector_mut_iterator<T> mutable* it) {
  embed {
    return {++it->elem, ++it->index};
  }
}

export template <T>
bool operator == (vector_mut_iterator<T>* it1, vector_mut_iterator<T>* it2) {
  embed {
    return it1->elem == it2->elem;
  }
}

export template <T>
void push_back(vector<T> mutable* v, T elem) {
  embed {
    v->push_back(std::move(elem));
  }
  set_moved_in_embed(move(elem));
}

export template <T>
T pop_back(vector<T> mutable* v) {
  embed {
    T t = std::move(v->back());
    v->pop_back();
    return std::move(t);
  }
}

export template <T>
T* operator [](vector<T>* v, int index) {
  embed {
    return &v->at(index);
  }
}

export template <T>
T mutable* operator [](vector<T> mutable* v, int index) {
  embed {
    return &v->at(index);
  }
}

export template <T>
T* back(vector<T>* v) {
  embed {
    return &v->back();
  }
}

export template <T>
T mutable* back(vector<T> mutable* v) {
  embed {
    return &v->back();
  }
}

export template <T>
T* front(vector<T>* v) {
  embed {
    return &v->front();
  }
}

export template <T>
T mutable* front(vector<T> mutable* v) {
  embed {
    return &v->front();
  }
}

export template <T>
int size(vector<T>* v) {
  embed {
    return v->size();
  }
}

export template <T>
bool empty(vector<T>* v) {
  return v->size() == 0;
}

export template <T> requires can_copy<T>
vector<T> copy(vector<T>* v) {
  mutable ret = vector<T>();
  for (elem : *v)
    ret.push_back(elem->copy());
  return move(ret);
}

export template <T> requires comparable<T>
bool operator == (vector<T>* v1, vector<T>* v2) {
  return v1->slice() == v2->slice();
}

export template <T> requires can_hash<T>
int get_hash(vector<T>* v) {
  return v->slice().get_hash();
}

export template <T> requires ordered<T>
void sort(vector<T> mutable* v) {
  embed {
    std::sort(v->begin(), v->end());
  }
}

export template <T> requires comparable<T>
int? find(vector<T>* v, T* elem) {
  for (i : range(0, v->size()))
    if ((*v)[i] == *elem)
      return i;
  return null;
}

export template <T>
void remove(vector<T> mutable* v, int index) {
  embed {
    v->erase(v->begin() + index);
  }
}

export template <T, int Sz>
vector<T> as_vector(mutable T[Sz] array) {
  mutable ret = vector<T>();
  for (it : array)
    embed {
    ret.push_back(std::move(*it.elem));
    }
  set_moved_in_embed(move(array));
  return move(ret);
}

export template <T>
T[] slice(vector<T>* v) {
  embed {
    return slice_t<T>{&v->front(), &v->back() + 1};
  }
}

export template<T>
void reserve(vector<T> mutable* v, int cnt) {
  embed {
    v->reserve(cnt);
  }
}

export template <U, T, Fun> requires can_invoke<Fun, U, T*>
vector<U> transform(vector<T>* v, Fun f) {
  mutable ret = vector<U>();
  ret.reserve(v->size());
  for (it : *v)
    ret.push_back(f(&*it));
  return move(ret);
}

export template <T, Fun> requires can_invoke<Fun, bool, T*>, can_copy<T>
vector<T> filter(vector<T>* v, Fun f) {
  mutable ret = vector<T>();
  for (it : *v)
    if (f(&*it))
      ret.push_back(it->copy());
  return move(ret);
}
