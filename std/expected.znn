
import "std/panic.znn";

export template <T, E>
union expected {
  T value;
  E error;
};

export template <T, E>
bool operator !(expected<T, E>* v) {
  switch (*v) {
    case (value) {
      return false;
    }
    case (error) {
      return true;
    }
  }
}

export template <T, E>
T* operator *(expected<T, E>* v) {
  switch (*v) {
    case (value) {
      return &value;
    }
    case (error) {
      panic("Expected contains error.");
    }
  }
}

export template <T, E>
T operator *(expected<T, E> v) {
  switch (move(v)) {
    case (value) {
      return move(value);
    }
    case (error) {
      panic("Expected contains error.");
    }
  }
}

export template <T, E> requires can_copy<E>
E get_error(expected<T, E>* v) {
  switch (*v) {
    case (value) {
      panic("Expected contains valid value");
    }
    case (error) {
      return error.copy();
    }
  }
}

export template <T, E>
E get_error(expected<T, E> v) {
  switch (move(v)) {
    case (value) {
      panic("Expected contains valid value");
    }
    case (error) {
      return move(error);
    }
  }
}

