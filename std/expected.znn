
export import "std/panic.znn";
export import "std/concepts.znn";

export template <T, E>
union expected {
  T value;
  E error;
};

export template <T, E> 
bool operator !(expected<T, E>* v) {
  switch (*v) {
    case (value) {
      return false;
    }
    case (error) {
      return true;
    }
  }
}

export template <E>
string get_error_string(E* e) {
  return "an error.";
}

export string get_error_string(string* s) {
  return "error: " + *s + ".";
}

export template <T, E>
T* operator *(expected<T, E>* v) {
  switch (*v) {
    case (value) {
      return &value;
    }
    case (error) {
      panic("Expected contains " + get_error_string(&error));
    }
  }
}

export template <T, E>
T mutable* operator *(expected<T, E> mutable* v) {
  switch (*v) {
    case (value) {
      return &value;
    }
    case (error) {
      panic("Expected contains " + get_error_string(&error));
    }
  }
}

export template <T, E>
T operator *(expected<T, E> v) {
  switch (move(v)) {
    case (value) {
      return move(value);
    }
    case (error) {
      panic("Expected contains " + get_error_string(&error));
    }
  }
}

export template <T, E> requires copy<E>
E get_error(expected<T, E>* v) {
  switch (*v) {
    case (value) {
      panic("Expected contains valid value");
    }
    case (error) {
      return error.copy();
    }
  }
}

export template <T, E>
E get_error(expected<T, E> v) {
  switch (move(v)) {
    case (value) {
      panic("Expected contains valid value");
    }
    case (error) {
      return move(error);
    }
  }
}

export template <T, E> requires copy<T>, copy<E>
expected<E, T> flip(expected<T, E>* v) {
  switch (*v) {
    case (value) {
      return value.copy();
    }
    case (error) {
      return error.copy();
    }
  }
}

export template <T, U> requires copy<T>, copy<U>
expected<T, U> copy(expected<T, U>* elem) = default;

export template <T, U> requires implicit_copy<T>, implicit_copy<U>
expected<T, U> implicit_copy(expected<T, U>* elem) = default;

export template <T, U, Fun> requires invoke<Fun, T*>
T* operator ?? (expected<T, U>* elem, Fun f) {
  if (*elem)
    return &**elem;
  else
    return f();
}

export template <T, U, Fun> requires invoke<Fun, T mutable*>
T mutable* operator ?? (expected<T, U> mutable* elem, Fun f) {
  if (*elem)
    return &**elem;
  else
    return f();
}

export template <T, U, Fun> requires invoke<Fun, T>
T operator ?? (expected<T, U> elem, Fun f) {
  if (elem)
    return *move(elem);
  else
    return f();
}

export template <T, U, V, Fun> requires invoke<Fun, V, U>
expected<T, V> map_error(expected<T, U> elem, Fun f) {
  if (elem)
    return *move(elem);
  else
    return f(get_error(move(elem)));
}
