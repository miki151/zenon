
export import "std/concepts.znn";
export import "std/union.znn";

export concept <T, U> equality_impl {
  bool operator == (T*, U*);
};

export template <T, U> requires equality_impl<T, U>
bool operator != (T* t, U* u) {
  return !(*t == *u);
}

export concept <T, U> increment_by_impl {
  T operator + (T*, U*);
};

export template <T, U> requires increment_by_impl<T, U>
void operator +=(T mutable* t, U* u) {
  *t = *t + *u;
}

export concept <T, U> decrement_by_impl {
  T operator - (T*, U*);
};

export template <T, U> requires decrement_by_impl<T, U>
void operator -=(T mutable* t, U* u) {
  *t = *t - *u;
}

export concept <T, U> multiply_by_impl {
  T operator * (T*, U*);
};

export template <T, U> requires multiply_by_impl<T, U>
void operator *=(T mutable* t, U* u) {
  *t = *t * *u;
}

export concept <T, U> divide_by_impl {
  T operator / (T*, U*);
};

export template <T, U> requires divide_by_impl<T, U>
void operator /=(T mutable* t, U* u) {
  *t = *t / *u;
}

export attribute @auto_equality;

export template <T> requires is_struct<T>, has_attribute<T, @auto_equality>
bool operator == (T* t1, T* t2) {
  unchecked static for (i = 0; i < struct_count(T); ++i)
    if (!(t1->(i) == t2->(i)))
      return false;
  return true;
}

export template <T> requires is_union<T>, has_attribute<T, @auto_equality>
bool operator == (T* t1, T* t2) {
  const index = t1->get_index();
  if (index != t2->get_index())
    return false;
  unchecked static for (i = 0; i < union_count(T); ++i)
    if (i == index)
      return t1->(i) == t2->(i);
  return false;
}
