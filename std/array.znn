
export import "std/concepts.znn";
export import "std/operator_helpers.znn";
export import "std/destruct.znn";

export template <T, int Size>
T operator [] (T[Size] a, int index) {
  for (mutable i = 0; i < Size; ++i)
    if (i != index)
      destruct(&a[i]);
  set_moved_in_embed(move(a));
  embed {
    return std::move(a.at(index));
  }
}

export template <T, int Size> requires can_copy<T>
T[Size] copy(T[Size]* array) {
  const get = [](T* t) -> T { return t->copy(); };
  embed {
    std::array<T, Size> a;
    for (int i = 0; i < Size; ++i)
      a[i] = invoke(&get, &(*array)[i]);
    return a;
  }
}

export template <int Size, T> requires can_copy<T>, (Size >= 0)
T[Size] array_repeat(T elem) {
  const get = [](T* t) -> T { return t->copy(); };
  embed {
    std::array<T, Size> a;
    for (int i = 0; i < Size; ++i)
      a[i] = invoke(&get, &elem);
    return a;
  }
}

export template <int Size, T, Fun> requires can_invoke<Fun, T, int>, (Size >= 0)
T[Size] array_generate(Fun fun) {
  embed {
    std::array<T, Size> a;
    for (int i = 0; i < Size; ++i)
      a[i] = invoke(&fun, i);
    return a;
  }
}

export template <int Size, T>
int size(T[Size]* array) {
  return Size;
}

export template <T>
struct array_iterator {
  T* elem;
};

export template <int Size, T>
array_iterator<T> begin(T[Size]* array) {
  embed {
    return {&(*array)[0]};
  }
}

export template <int Size, T>
array_iterator<T> end(T[Size]* array) {
  embed {
    return {&(*array)[array->size()]};
  }
}

export template <T>
T* operator *(array_iterator<T>* it) {
  return it->elem;
}

export template <T>
array_iterator<T> operator ++(array_iterator<T> mutable* it) {
  embed {
    return {++it->elem};
  }
}

export template <T>
bool operator == (array_iterator<T>* it1, array_iterator<T>* it2) {
  embed {
    return it1->elem == it2->elem;
  }
}

export template <T>
struct array_mut_iterator {
  T mutable* elem;
};

export template <int Size, T>
array_mut_iterator<T> begin(T[Size] mutable* array) {
  embed {
    return {&(*array)[0]};
  }
}

export template <int Size, T>
array_mut_iterator<T> end(T[Size] mutable* array) {
  embed {
    return {&(*array)[array->size()]};
  }
}

export template <T>
T mutable* operator *(array_mut_iterator<T>* it) {
  return it->elem;
}

export template <T>
array_mut_iterator<T> operator ++(array_mut_iterator<T> mutable* it) {
  embed {
    return {++it->elem};
  }
}

export template <T>
bool operator == (array_mut_iterator<T>* it1, array_mut_iterator<T>* it2) {
  embed {
    return it1->elem == it2->elem;
  }
}

