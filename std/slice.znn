export import "std/pointer.znn";
export import "std/builtin_types.znn";
export import "std/concepts.znn";
export import "std/operator_helpers.znn";
export import "std/panic.znn";

export embed {
template <typename T>
struct slice_t {
  T const* begin;
  T const* end;
};

template <typename T>
struct mutable_slice_t {
  T* begin;
  T* end;
  operator slice_t<T>() const {
    return slice_t<T> {
      begin, end
    };
  }
};
}

export template <T>
extern struct slice_t;

export template <T>
extern struct mutable_slice_t;

export template <T>
void discard_impl(T) {}

export template <T>
int size(T[]* s) {
  embed {
    return s->end - s->begin;
  }
}

export template <T>
bool empty(T[]* s) {
  return s^.size() == 0;
}

export template <T>
T[] implicit_copy(T[]* s) {
  embed {
    return *s;
  }
}

export template <T>
T* operator[](T[]* s, int index) {
  assert(index >= 0 && index < s^.size());
  embed {
    return &s->begin[index];
  }
}

export template <T>
T* front(T[]* s) {
  return &(*s)[0];
}

export template <T>
T* back(T[]* s) {
  return &(*s)[s^.size() - 1];
}

export template <T>
struct slice_iterator {
  T* elem;
  int index;
};

export template <T>
slice_iterator<T> implicit_copy(slice_iterator<T>*) = default;

export template <T>
slice_iterator<T> begin(T[]* v) {
  embed {
    return {v->begin, 0};
  }
}

export template <T>
slice_iterator<T> end(T[]* v) {
  const size = v^.size();
  embed {
    return {v->end, size};
  }
}

export template <T>
T* operator *(slice_iterator<T>* it) {
  return it^.elem;
}

export template <T>
slice_iterator<T> operator ++(slice_iterator<T> mutable* it) {
  embed {
    ++it->elem;
  }
  ++it^.index;
  return implicit_copy(it);
}

export template <T>
bool operator == (slice_iterator<T>* it1, slice_iterator<T>* it2) {
  embed {
    return it1->elem == it2->elem;
  }
}

export template <T>
T[] subsequence(T[]* s, int index, int length) {
  assert(index >= 0 && index <= s^.size() && length >= 0 && index + length <= s^.size());
  embed {
    return slice_t<T>{s->begin + index, s->begin + index + length};
  }
}

export template <T> requires get_hash<T>
int get_hash(T[] v) {
  mutable res = 0;
  mutable u = 1;
  for (elem : v) {
    res += u * elem^.get_hash();
    u *= 5;
  }
  return res;
}

export template <T> requires equality<T>
bool operator == (T[] v1, T[] v2) {
  if (v1.size() != v2.size())
    return false;
  for (i = 0; i < v1.size(); ++i)
    if (!(v1[i] == v2[i]))
      return false;
  return true;
}

export template <T, int N>
T[] slice(T[N]* array) {
  embed {
    if (array->empty())
      return slice_t<T>{nullptr, nullptr};
    return slice_t<T>{&array->front(), &array->back() + 1};
  }
}

export template <T>
T[] singleton_slice(T* elem) {
  embed {
    return slice_t<T>{elem, elem + 1};
  }
}

export template <T>
int size(T mutable[]* s) {
  embed {
    return s->end - s->begin;
  }
}

export template <T>
bool empty(T mutable[]* s) {
  return s^.size() == 0;
}

export template <T>
T mutable[] implicit_copy(T mutable[]* s) {
  embed {
    return *s;
  }
}

export template <T>
T mutable* operator[](T mutable[]* s, int index) {
  assert(index >= 0 && index < s^.size());
  embed {
    return &s->begin[index];
  }
}

export template <T>
T mutable* front(T mutable[]* s) {
  return &(*s)[0];
}

export template <T>
T mutable* back(T mutable[]* s) {
  return &(*s)[s^.size() - 1];
}

export template <T>
struct mutable_slice_iterator {
  T mutable* elem;
  int index;
};

export template <T>
mutable_slice_iterator<T> implicit_copy(mutable_slice_iterator<T>*) = default;

export template <T>
mutable_slice_iterator<T> begin(T mutable[]* v) {
  embed {
    return {v->begin, 0};
  }
}

export template <T>
mutable_slice_iterator<T> end(T mutable[]* v) {
  const size = v^.size();
  embed {
    return {v->end, size};
  }
}

export template <T>
T mutable* operator *(mutable_slice_iterator<T>* it) {
  return it^.elem;
}

export template <T>
mutable_slice_iterator<T> operator ++(mutable_slice_iterator<T> mutable* it) {
  embed {
    ++it->elem;
  }
  ++it^.index;
  return implicit_copy(it);
}

export template <T>
bool operator == (mutable_slice_iterator<T>* it1, mutable_slice_iterator<T>* it2) {
  embed {
    return it1->elem == it2->elem;
  }
}

export template <T>
T mutable[] subsequence(T mutable[]* s, int index, int length) {
  assert(index >= 0 && index <= s^.size() && length >= 0 && index + length <= s^.size());
  embed {
    return mutable_slice_t<T>{s->begin + index, s->begin + index + length};
  }
}

export template <T> requires equality<T>
bool operator == (T mutable[] v1, T mutable[] v2) {
  if (v1.size() != v2.size())
    return false;
  for (i = 0; i < v1.size(); ++i)
    if (!(v1[i] == v2[i]))
      return false;
  return true;
}

export template <T, int N>
T mutable[] slice(T[N] mutable* array) {
  embed {
    if (array->empty())
      return mutable_slice_t<T>{nullptr, nullptr};
    return mutable_slice_t<T>{&array->front(), &array->back() + 1};
  }
}

export template <T>
T mutable[] singleton_slice(T mutable* elem) {
  embed {
    return mutable_slice_t<T>{elem, elem + 1};
  }
}

