
export import "std/concepts.znn";
export import "std/hash_adapter.znn";

export embed {
#include <unordered_map>
template<typename Key, typename Value>
using hash_map = std::unordered_map<Key,Value,hash_adapter<Key>,hash_adapter<Key>>;
template<typename Key, typename Value>
using hash_map_iterator = typename hash_map<Key, Value>::const_iterator;
using std::pair;
}

export template <Key, Value>
extern struct hash_map;

export template <Key, Value>
void is_member_params(hash_map<Key, Value>, Key, Value) {}

export template<Key, Value> requires hash_key<Key>
extern hash_map();

export template <Key, Value> requires hash_key<Key>
void insert(hash_map<Key, Value> mutable* m, Key key, Value value) {
  embed {
    (*m)[key] = std::move(value);
  }
  set_moved_in_embed(move(key));
  set_moved_in_embed(move(value));
  return;
  discard hash_adapter<Key>().invoke(&key);
  discard hash_adapter<Key>().invoke(&key, &key);
}

export template <Key, Value> requires hash_key<Key>
bool contains(hash_map<Key, Value>* m, Key* key) {
  embed_returns {
    return m->count(*key);
  }
  discard hash_adapter<Key>().invoke(key);
  discard hash_adapter<Key>().invoke(key, key);
}

export template <Key, Value> requires hash_key<Key>
void erase(hash_map<Key, Value> mutable* m, Key* key) {
  embed_returns {
    return m->erase(*key);
  }
  discard hash_adapter<Key>().invoke(key);
  discard hash_adapter<Key>().invoke(key, key);
}

export template <Key, Value> requires hash_key<Key>
Value* get(hash_map<Key, Value>* m, Key* key) {
  embed_returns {
    return op_get_address(m->at(*key));
  }
  discard hash_adapter<Key>().invoke(key);
  discard hash_adapter<Key>().invoke(key, key);
}

export template <Key, Value> requires hash_key<Key>
Value mutable* get(hash_map<Key, Value> mutable* m, Key* key) {
  embed_returns {
    return &m->at(*key);
  }
  discard hash_adapter<Key>().invoke(key);
  discard hash_adapter<Key>().invoke(key, key);
}

export template <Key, Value> requires hash_key<Key>
Value*? get_maybe(hash_map<Key, Value>* m, Key* key) {
  if (m^.contains(key))
    return m^.get(key);
  return null;
}

export template <Key, Value> requires hash_key<Key>, copy<Key>
Value mutable* get_or_init(hash_map<Key, Value> mutable* m, Key* key, Value value) {
  if (!m^.contains(key))
    m^.insert(key^.copy(), move(value));
  return m^.get(key);
}

export template <Key, Value> requires hash_key<Key>
Value mutable*? get_maybe(hash_map<Key, Value> mutable* m, Key* key) {
  if (m^.contains(key))
    return m^.get(key);
  return null;
}

export template <Key, Value> requires hash_key<Key>
int size(hash_map<Key, Value>* m) {
  embed_returns {
    return m->size();
  }
}

export template <Key, Value>
extern struct hash_map_iterator;

export template <Key, Value>
hash_map_iterator<Key, Value> implicit_copy(hash_map_iterator<Key, Value>* it) {
  embed_returns {
    return *it;
  }
}

export template <Key, Value>
hash_map_iterator<Key, Value> begin(hash_map<Key, Value>* m) {
  embed_returns {
    return m->begin();
  }
}

export template <Key, Value>
hash_map_iterator<Key, Value> end(hash_map<Key, Value>* m) {
  embed_returns {
    return m->end();
  }
}

export template <Key, Value>
Key* key(hash_map_iterator<Key, Value>* it) {
  embed_returns {
    return &(*it)->first;
  }
}

export template <Key, Value>
Value* value(hash_map_iterator<Key, Value>* it) {
  embed_returns {
    return &(*it)->second;
  }
}

export template <Key, Value>
extern hash_map_iterator<Key, Value> operator ++(hash_map_iterator<Key, Value> mutable* it);

export template <Key, Value>
extern bool operator == (hash_map_iterator<Key, Value>* it1, hash_map_iterator<Key, Value>* it2);
