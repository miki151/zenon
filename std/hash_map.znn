
export import "std/concepts.znn";
export import "std/hash_adapter.znn";

export embed {
#include <unordered_map>
template<typename Key, typename Value>
using hash_map = std::unordered_map<Key,Value,hash_adapter<Key>,hash_adapter<Key>>;
using std::pair;
}

export template <Key, Value>
extern struct hash_map;

export template<Key, Value> requires hash_key<Key>
extern hash_map();

export template <Key, Value> requires hash_key<Key>
void insert(hash_map<Key, Value> mutable* m, Key key, Value value) {
  embed {
    m->insert(std::make_pair(std::move(key), std::move(value)));
  }
  return;
  discard hash_adapter<Key>().invoke(&key);
  discard hash_adapter<Key>().invoke(&key, &key);
}

export template <Key, Value> requires hash_key<Key>
bool contains(hash_map<Key, Value>* m, Key* key) {
  embed {
    return m->count(*key);
  }
}

export template <Key, Value> requires hash_key<Key>
Value* get(hash_map<Key, Value>* m, Key* key) {
  embed {
    return &m->at(*key);
  }
}

export template <Key, Value> requires hash_key<Key>
Value mutable* get(hash_map<Key, Value> mutable* m, Key* key) {
  embed {
    return &m->at(*key);
  }
}

export template <Key, Value> requires hash_key<Key>
int size(hash_map<Key, Value>* m) {
  embed {
    return m->size();
  }
}

