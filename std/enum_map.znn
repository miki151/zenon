export import "std/concepts.znn";
export import "std/enum.znn";

export template <Key, Value> requires is_enum<Key>
struct enum_map {
  Value[enum_count(Key)] values;
};

template <Key, Value> requires is_enum<Key>, can_copy<Value>
enum_map(Value* value) {
  return enum_map<Key, Value>::enum_map(
      array_repeat<(enum_count(Key))>(value->copy()));
}

export template <Key, Value, Fun> requires is_enum<Key>, can_invoke<Fun, Value, Key>
enum_map<Key, Value> enum_map_generate(Fun fun) {
  return enum_map<Key, Value>::enum_map(
      array_generate<(enum_count(Key)), Value>([&](int value) { return fun.invoke(fromInt<Key>(value)); }));
}

export template <Key, Value> requires is_enum<Key>
Value* operator [](enum_map<Key,Value>* map, Key key) {
  return &map->values[key.asInt()];
}

