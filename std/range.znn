import "std/math.znn";
import "std/builtin_types.znn";

export struct range {
  int start;
  int finish;
};

export range(int start, mutable int finish) {
  if (start > finish)
    finish = start;
  return range::range(start, finish);
}

export range implicit_copy(range*) = default;

export struct range_iterator {
  int elem;
};

export int begin(range* r) {
  return r^.start;
}

export int end(range* r) {
  return r^.finish;
}

export bool empty(range* r) {
  return r^.start == r^.finish;
}

export range intersection(range* r1, range* r2) {
  return range(max(r1^.start, r2^.start), min(r1^.finish, r2^.finish));
}
