
export import "expected.znn";
import "std/time.znn";

export embed{
#include <cstdio>
#include <cerrno>
}

embed {
#include <cstdlib>
#include <climits>
}

export string to_string(int* i) {
  embed_returns {
    char buf[12];
    snprintf(buf, 12, "%d", *i);
    return lite_str<>::owned(buf);
  }
}

export string to_string(long* i) {
  embed_returns {
    char buf[20];
    snprintf(buf, 20, "%lld", *i);
    return lite_str<>::owned(buf);
  }
}

export string to_string(double* i) {
  embed_returns {
    char buf[20];
    snprintf(buf, 20, "%f", *i);
    return lite_str<>::owned(buf);
  }
}

export string to_string(string* s) {
  return *s;
}

export string to_string(char* s) {
  embed_returns {
    char buf[2];
    buf[0] = *s;
    buf[1] = '\0';
    return lite_str<>::owned(buf);
  }
}

export string to_string(bool* b) {
  if (*b)
    return "true";
  else
    return "false";
}

export void printf(string s) {
  embed {
    printf("%s", s.data());
  }
}

export extern struct FILE;

export struct file_output {
  FILE mutable* handle;
};

export void printf(file_output* f, string s) {
  embed {
    fprintf(f->handle, "%s", s.data());
  }
}

export void destruct(file_output* f) {
  embed {
    fclose(f->handle);
  }
}

export struct file_input {
  FILE mutable* handle;
};

export void destruct(file_input* f) {
  embed {
    fclose(f->handle);
  }
}

export string get_canonical_path(string path) {
  embed_returns {
    char buf[PATH_MAX];
    realpath(path.data(), buf);
    return zenon_string::owned(buf);
  }
}

concept <T> file_type_constructor {
  T(FILE mutable*);
};

template <file_type> requires file_type_constructor<file_type>
expected<file_type, string> open_file_impl(string path, string perm) {
  const gen_error = [&] (string e) -> expected<file_type, string> {
    return "Error opening \"" + path + "\": " + move(e);
  };
  const gen_value = [&] (FILE mutable* h) -> expected<file_type, string> {
    return file_type(h);
  };
  embed_returns {
    auto handle = fopen(path.data(), perm.data());
    if (!handle)
      return invoke(&gen_error, zenon_string::reference(strerror(errno)));
    return invoke(&gen_value, handle);
  }
}

export expected<file_input, string> open_file_r(string path) {
  return open_file_impl<file_input>(move(path), "r");
}

export expected<file_output, string> open_file_w(string path) {
  return open_file_impl<file_output>(move(path), "w");
}

export milliseconds_t? get_modification_time(string path) {
  embed_returns {
    struct stat info;
    if (stat(path.data(), &info) == 0)
      return info.st_mtime * 1000 + info.st_mtim.tv_nsec / 1000000;
  }
  return null;
}

export bool file_exists(string path) {
  return !!get_modification_time(move(path));
}

template <T>
T? scan_impl(file_input* f, string format) {
  embed {
    T ret;
    if (fscanf(f->handle, format.data(), &ret) == 1)
      return ret;
  }
  return null;
}

export int? scan_int(file_input* f) {
  return scan_impl<int>(f, "%d");
}

export double? scan_double(file_input* f) {
  return scan_impl<double>(f, "%lf");
}

export char? scan_char(file_input* f) {
  return scan_impl<char>(f, "%c");
}

export string? scan_string(file_input* f, int max_length) {
  const format = "%{max_length}s";
  embed {
    char buf[max_length + 1];
    if (fscanf(f->handle, format.data(), buf) == 1)
      return zenon_string::owned(buf);
  }
  return null;
}

export string? scan_line(file_input* f, int max_length) {
  embed {
    char buf[max_length + 1];
    if (fgets(buf, max_length, f->handle) != NULL)
      return zenon_string::owned(buf);
  }
  return null;
}

export string!string read_content(file_input* f) {
  const get_error = [&](string err) -> string!string {
    return expected<string, string>::error(move(err));
  };
  const get_result = [&](string res) -> string!string {
    return expected<string, string>::value(move(res));
  };
  embed_returns {
    fseek(f->handle, 0, SEEK_END);
    int size = ftell(f->handle);
    rewind(f->handle);
    zenon_string ret;
    auto buffer = ret.create_buffer(size);
    auto result = fread(buffer, 1, size, f->handle);
    if (result != size)
      return invoke(&get_error, zenon_string::reference("Unable to read file content"));
    return invoke(&get_result, std::move(ret));
  }
}

export string? remove_file(string path) {
  embed {
    if (remove(path.data()))
      return lite_str<>::reference(strerror(errno));
  }
  return null;
}
