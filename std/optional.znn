
export import "std/panic.znn";
export import "std/concepts.znn";
export import "std/destruct.znn";

export template <T>
bool operator ! (T?* elem) {
  embed_returns {
    return !*elem;
  }
}

export template <T> requires copy<T>
T? copy(T?* elem) {
  if (*elem)
    return (*elem)^.copy();
  else
    return null;
}

export template <T> requires implicit_copy<T>
T? implicit_copy(T?* elem) {
  if (*elem)
    return implicit_copy(&**elem);
  else
    return null;
}

export template <T>
null_type get_error(T?* elem) {
  return null;
}

export template <T>
T mutable* operator * (T? mutable* elem) {
  if (!*elem)
    panic("Attempted to dereference a null value from " + to_string(T) + "?");
  embed_returns {
    return &**elem;
  }
}

export template <T>
T* operator * (T?* elem) {
  if (!*elem)
    panic("Attempted to dereference a null value from " + to_string(T) + "?");
  embed_returns {
    return &**elem;
  }
}

export template <T>
T operator * (T? elem) {
  if (!elem)
    panic("Attempted to dereference a null value from " + to_string(T) + "?");
  set_moved_in_embed(move(elem));
  embed_returns {
    return std::move(*elem);
  }
}

export template <T, Fun> requires invoke<Fun, T*>
T* operator ?? (T?* elem, Fun f) {
  if (*elem)
    return &**elem;
  else
    return f();
}

export template <T, Fun> requires invoke<Fun, T mutable*>
T mutable* operator ?? (T? mutable* elem, Fun f) {
  if (*elem)
    return &**elem;
  else
    return f();
}

export template <T, Fun> requires invoke<Fun, T>
T operator ?? (T? elem, Fun f) {
  if (elem)
    return *move(elem);
  else
    return f();
}

export template <T, U, Fun> requires invoke<Fun, U, T*>
U? map_to(T?* elem, Fun* f) {
  if (*elem)
    return f^.invoke(&**elem);
  else
    return null;
}

export template <T, U, Fun> requires invoke<Fun, U?, T*>
U? map_to(T?* elem, Fun* f) {
  if (*elem)
    return f^.invoke(&**elem);
  else
    return null;
}

export bool operator ! (null_type*) {
  return true;
}

export noreturn operator * (null_type*) {
  panic("Attempted to dereference a null value");
}

export template <T> requires equality<T>
bool operator == (T?* e1, T* e2) {
  return !!*e1 && **e1 == *e2;
}

export template <T> requires equality<T>
bool operator == (T* e1, T?* e2) {
  return !!*e2 && *e1 == **e2;
}

export template <T> requires equality<T>
bool operator == (T?* e1, T?* e2) {
  return !!*e1 && !!*e2 ? **e1 == **e2 : !*e1 == !*e2;
}

export template <T>
bool operator == (T?* elem, null_type*) {
  return !*elem;
}

export bool operator == (null_type*, null_type*) {
  return true;
}

export template <T>
void destruct(T?* t) {
  if (*t)
    (*t)^.destruct();
}

export template <T>
T? create_null() {
  embed_returns {
    return zenon::optional<T>(null);
  }
}


