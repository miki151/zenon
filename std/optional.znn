
export import "std/panic.znn";
export import "std/concepts.znn";

export template <T>
bool operator ! (T?* elem) {
  embed {
    return !*elem;
  }
}

export template <T> requires can_copy<T>
T? copy(T?* elem) {
  if (*elem)
    return (*elem)->copy();
  else
    return null;
}

export template <T> requires can_implicit_copy<T>
T? implicit_copy(T?* elem) {
  if (*elem)
    return implicit_copy(&**elem);
  else
    return null;
}

export template <T>
T mutable* operator * (T? mutable* elem) {
  if (!*elem)
    panic("Attempted to dereference a null value from " + get_name(T) + "?");
  embed {
    return &**elem;
  }
}

export template <T>
T* operator * (T?* elem) {
  if (!*elem)
    panic("Attempted to dereference a null value from " + get_name(T) + "?");
  embed {
    return &**elem;
  }
}

export template <T>
T operator * (T? elem) {
  if (!elem)
    panic("Attempted to dereference a null value from " + get_name(T) + "?");
  embed {
    return std::move(*elem);
  }
}

export template <T, Fun> requires can_invoke<Fun, T*>
T* operator ?? (T?* elem, Fun f) {
  if (*elem)
    return &**elem;
  else
    return f.invoke();
}

export template <T, Fun> requires can_invoke<Fun, T mutable*>
T mutable* operator ?? (T? mutable* elem, Fun f) {
  if (*elem)
    return &**elem;
  else
    return f.invoke();
}

export template <T, Fun> requires can_invoke<Fun, T>
T operator ?? (T? elem, Fun f) {
  if (elem)
    return *move(elem);
  else
    return f.invoke();
}

export bool operator ! (null_type*) {
  return true;
}

export noreturn operator * (null_type*) {
  panic("Attempted to dereference a null value");
}

export template <T>
bool operator == (T?* elem, null_type*) {
  return !*elem;
}

export bool operator == (null_type*, null_type*) {
  return true;
}
