
import "std/concepts.znn";

export template <T>
struct box {
  T mutable* elem;
  invoke<void, T*>* destructor;
};

export template <T> requires copy<T>
box<T> copy(box<T>* b) {
  return box((*b)->copy());
}

export template <T>
box(T value) {
  const c = [](T value) -> T mutable* {
    set_moved_in_embed(move(value));
    embed_returns {
      return new T(std::move(value));
    }
  }(move(value));
  return box<T>::box(c, &[](T* elem ) { elem^.destruct(); });
}

export template <T, C> requires is_concept<C>
T* get_concept_object(C* c) {
  embed_returns {
    return (T*)c.object;
  }
}

export template <C, T> requires is_concept<C>
box<C> box_as(T value) {
  unchecked {
    C mutable* c = [](T value) -> T mutable* {
      set_moved_in_embed(move(value));
      embed_returns {
        return new T(std::move(value));
      }
    }(move(value));
    return box<C>::box(c, &[](C* elem ) {
      get_concept_object<T>(elem)^.destruct();
    });
  }
}

export template <C>
C* operator *(box<C>* v) {
  return v->elem;
}

export template <C>
C mutable* operator *(box<C> mutable* v) {
  return v->elem;
}

export template <C>
C* get(box<C>* v) {
  return v->elem;
}

export template <C>
C mutable* get(box<C> mutable* v) {
  return v->elem;
}

export template <C> requires is_concept<C>
void cpp_delete_impl(C* elem) {
  embed {
    elem.vTable->cpp_delete(elem.object);
  }
}

export template <T>
void cpp_delete_impl(T* elem) {
  embed {
    delete elem;
  }
}

export template <C>
void destruct(box<C>* v) {
  v^.destructor^(v^.elem);
  cpp_delete_impl(v->elem);
}


