
export import "std/vector.znn";
export import "std/concepts.znn";

export embed {
#include <map>
template<typename Key, typename Value>
using map = std::map<Key,Value>;
using std::pair;
}

template<Key, Value> requires equality<Key>
extern struct map;

template <Key, Value> requires equality<Key>
void insert(map<Key, Value> mutable* m, Key key, Value value) {
  embed {
    m->insert(std::make_pair(std::move(key), std::move(value)));
  }
}

template <Key, Value> requires equality<Key>
Value* operator [] (map<Key, Value>* m, Key* key) {
  embed_returns {
    return &m->at(*key);
  }
}

template <Key, Value> requires equality<Key>
Value mutable* operator [] (map<Key, Value> mutable* m, Key* key) {
  embed_returns {
    return &m->at(*key);
  }
}

template <Key, Value> requires equality<Key>
bool contains(map<Key, Value>* m, Key key) {
  embed_returns {
    return m->count(key);
  }
}

template <Key, Value> requires equality<Key>
Value*? getMaybe(map<Key, Value>* m, Key key) {
  embed_returns {
    if (m->count(key) > 0)
      return &m->at(key);
    else
      return null;
  }
}

template <Key, Value> requires equality<Key>
Value mutable*? getMaybe(map<Key, Value> mutable* m, Key key) {
  embed_returns {
    if (m->count(key) > 0)
      return &m->at(key);
    else
      return null;
  }
}

template <Key, Value> requires equality<Key>
Value mutable* getOrInit(map<Key, Value> mutable* m, Key key) {
  embed_returns {
    return &(*m)[key];
  }
}

template <Key, Value> requires equality<Key>
vector<Key> getAllKeys(map<Key, Value>* m) {
  mutable ret = vector<Key>();
  embed {
    for (auto& elem : *m)
      ret.push_back(elem.first);
  }
  return move(ret);
}
