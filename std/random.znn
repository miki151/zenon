
embed {
  #include <cstdlib>
  #include <ctime>
}

import "std/range.znn";
import "std/math.znn";
import "std/panic.znn";

export void init_random() {
  embed {
    srand(time(0));
  }
}

export int get_random(int max) {
  assert(max > 0);
  embed {
    return rand() % max;
  }
}

export int get_random(range r) {
  return r.start + get_random(r.finish - r.start);
}

export double get_random_d() {
  const r = 1000;
  return get_random(r).as_double() / (r - 1).as_double();
}

export template <T> requires is_enum<T>
T get_random() {
  const value = get_random(enum_count(T));
  embed {
    return T(value);
  }
}

export template <T>
T* get_random(T[] elems) {
  return &elems[get_random(elems.size())];
}
