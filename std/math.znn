
export import "std/concepts.znn";

export embed {
#include <cmath>
}

export template <T> requires inequality<T>
T min(T a, T b) {
  if (a < b)
    return move(a);
  else
    return move(b);
}

export template <T> requires inequality<T>
T max(T a, T b) {
  if (a < b)
    return move(b);
  else
    return move(a);
}

template <U, T>
U convert_to(T a) embed {
  return (U) a;
}

export int as_int(double a) {
  return a.convert_to<int>();
}

export int as_int(long a) {
  return a.convert_to<int>();
}

export int as_int(short a) {
  return a;
}

export int as_int(byte a) {
  return a;
}

export short as_short(byte a) {
  return a;
}

export short as_short(double a) {
  return a.convert_to<short>();
}

export short as_short(long a) {
  return a.convert_to<short>();
}

export short as_short(int a) {
  return a.convert_to<short>();
}

export byte as_byte(double a) {
  return a.convert_to<byte>();
}

export byte as_byte(long a) {
  return a.convert_to<byte>();
}

export byte as_byte(int a) {
  return a.convert_to<byte>();
}

export byte as_byte(short a) {
  return a.convert_to<byte>();
}

export long as_long(double a) {
  return a.convert_to<long>();
}

export long as_long(int a) {
  return a;
}

export long as_long(short a) {
  return a;
}

export long as_long(byte a) {
  return a;
}

export double as_double(int a) {
  return a.convert_to<double>();
}

export double as_double(short a) {
  return a.convert_to<double>();
}

export double as_double(byte a) {
  return a.convert_to<double>();
}

export double as_double(long a) {
  return a.convert_to<double>();
}

export extern double sqrt(double value);
export extern double pow(double x, double y);
export extern int abs(int value);
export long abs(long value) embed {
  return llabs(value);
}
export double abs(double value) embed {
  return fabs(value);
}
export extern double cos(double value);
export extern double sin(double value);
export extern double atan2(double x, double y);
export extern double ceil(double x);
export extern double floor(double x);
