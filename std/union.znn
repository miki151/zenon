
export template <T> requires is_union<T>
int get_index(T* t) embed {
  return int(t->unionElem);
}

export concept <T, IndexHelper, Alternative> has_alternative {
  void builtin_has_alternative(T, IndexHelper, Alternative);
};

export template <int Index, T, Ret> requires is_union<T>, has_alternative<T, index_helper<Index>, Ret> 
Ret* get_alternative(T* t) {
  mixin "return &t^." + get_alternative_name(T, Index) + ";";
}

export template <int Index, T, Ret> requires is_union<T>, has_alternative<T, index_helper<Index>, Ret>
Ret mutable* get_alternative(T mutable* t) {
  mixin "return &t^." + get_alternative_name(T, Index) + ";";
}

export template <int Index, T, Ret> requires is_union<T>, has_alternative<T, index_helper<Index>, Ret>
Ret get_alternative(T t) {
  mixin "return move(t)." + get_alternative_name(T, Index) + ";";
}


