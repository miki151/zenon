
export template <T> requires is_union<T>
int get_index(T* t) {
  embed_returns {
    return int(t->unionElem);
  }
}

export template <int Index, T> requires is_union<T>
$get_alternative_type(T, Index)* get_alternative(T* t) {
  mixin "return &t^." + get_alternative_name(T, Index) + ";";
}

export template <int Index, T> requires is_union<T>
$get_alternative_type(T, Index) mutable* get_alternative(T mutable* t) {
  mixin "return &t^." + get_alternative_name(T, Index) + ";";
}

export template <int Index, T> requires is_union<T>
$get_alternative_type(T, Index) get_alternative(T t) {
  mixin "return move(t)." + get_alternative_name(T, Index) + ";";
}


