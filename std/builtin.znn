
export import "std/slice.znn";
export import "std/array.znn";
export import "std/concepts.znn";
export import "std/string.znn";
export import "std/optional.znn";
export import "std/pointer.znn";
export import "std/destruct.znn";
export import "std/operator_helpers.znn";
export import "std/builtin_types.znn";

export template <T> requires implicit_copy<T>
T copy(T* b) {
  return *b;
}

export template <Enum> requires is_enum<Enum>
extern bool operator == (Enum e1, Enum e2);

export template <T>
extern bool operator == (T** t1, T** t2);

export template <T>
extern bool operator == (T mutable** t1, T** t2);

export template <T>
extern bool operator == (T** t1, T mutable** t2);

export template <T>
extern bool operator == (T mutable** t1, T mutable** t2);

export template <Enum> requires is_enum<Enum>
Enum implicit_copy(Enum* e) {
  return *e;
}

export template <T>
void swap(T mutable* x, T mutable* y) embed {
  auto z = std::move(*x);
  *x = std::move(*y);
  *y = std::move(z);
}

