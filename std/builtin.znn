
export import "std/slice.znn";
export import "std/array.znn";
export import "std/concepts.znn";
export import "std/string.znn";
export import "std/optional.znn";
export import "std/pointer.znn";
export import "std/destruct.znn";
export import "std/operator_helpers.znn";

export int implicit_copy(int* b) {
  embed {
    return *b;
  }
}

export string implicit_copy(string* b) {
  embed {
    return *b;
  }
}

export bool implicit_copy(bool* b) {
  embed {
    return *b;
  }
}

export char implicit_copy(char* b) {
  embed {
    return *b;
  }
}

export double implicit_copy(double* b) {
  embed {
    return *b;
  }
}

export template <T> requires can_implicit_copy<T>
T copy(T* b) {
  return *b;
}

export template <Enum> requires is_enum<Enum>
bool operator == (Enum e1, Enum e2) {
  embed {
    return e1 == e2;
  }
}

export template <T>
bool operator == (T** t1, T** t2) {
  embed {
    return *t1 == *t2;
  }
}

export template <Enum> requires is_enum<Enum>
Enum implicit_copy(Enum* e) {
  return *e;
}

export template <T>
void discard_impl(T) {}

