
export concept <T, IndexHelper, Member> has_member {
  void builtin_has_member(T, IndexHelper, Member);
};

export template <int Index, T, Ret> requires is_struct<T>, has_member<T, index_helper<Index>, Ret>
Ret* get_member(T* t) {
  mixin "return &t^." + get_member_name(T, Index) + ";";
}

export template <int Index, T, Ret> requires is_struct<T>, has_member<T, index_helper<Index>, Ret>, (!is_const_member(T, Index))
Ret mutable* get_member(T mutable* t) {
  mixin "return &t^." + get_member_name(T, Index) + ";";
}

export template <int Index, T, Ret> requires is_struct<T>, has_member<T, index_helper<Index>, Ret>
Ret get_member(T t) {
  mixin "return move(t)." + get_member_name(T, Index) + ";";
}


