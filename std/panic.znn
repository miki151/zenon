
import "std/io.znn";
import "std/string.znn";
export import "std/concepts.znn";

invoke<void, string>* mutable* get_panic_handler() {
  static mutable stmt =
      "embed_returns \{ static const_fat_ptr<invokevoid_tzenon_string_vtable> ptr = \{\}; return &ptr; }";
  mixin stmt;
}

export void set_panic_handler(invoke<void, string>* handler) {
  *get_panic_handler() = handler;
}

bool is_null_invoke(invoke<void, string>* ptr) {
  embed_returns {
    return !ptr.object;
  }
}

export noreturn panic() {
  panic("");
}

export embed {
#include <stdlib.h>
}

export extern noreturn exit(int);

export noreturn panic(string message) {
  const handler = *get_panic_handler();
  if (!is_null_invoke(handler)) {
    handler^.invoke(message);
    exit(1);
  } else {
    printf("The program panicked with the message: " + message + "\n");
    embed_returns {
      if (runningUnderDebugger())
        throw std::exception{};
      else
        throw PanicException{};
    }
  }
}

export void assert(bool condition, string message) {
  if (!condition)
    panic(message);
}

export void assert(bool condition) {
  if (!condition)
    panic();
}

