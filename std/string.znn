import "std/slice.znn";
import "std/builtin_types.znn";
import "std/optional.znn";

export int size(string* s) {
  embed_returns {
    return s->size();
  }
}

export bool empty(string* s) {
  return s->size() == 0;
}

export string substring(string* s, int start, int length) {
  embed_returns {
    return s->substring(start, length);
  }
}

export char operator [](string* s, int index) {
  embed_returns {
    return (*s)[index];
  }
}

export char[] slice(string* s) {
  embed_returns {
    return slice_t<char>{&s->data()[0], &s->data()[s->size()]};
  }
}

export int get_hash(string* s) {
  return s->slice().get_hash();
}

embed {
#include <cstdlib>
}

export int? to_int(string* s) {
  const int? err = null;
  if (s->empty())
    return err;
  embed_returns {
    char* control;
    int result = std::strtol(s->data(), &control, 0);
    if (control != s->data() + s->size())
      return err;
    return result;
  }
}
