import "std/slice.znn";
import "std/builtin_types.znn";
import "std/optional.znn";
import "std/range.znn";

embed {
#include <regex>
}

export int size(string* s) {
  embed_returns {
    return s->size();
  }
}

export bool empty(string* s) {
  return s->size() == 0;
}

export string substring(string* s, int start, int length) {
  embed_returns {
    return s->substring(start, length);
  }
}

export string substring(string* s, int start) {
  return s^.substring(start, s^.size() - start);
}

export string suffix(string* s, int length) {
  return s^.substring(s^.size() - length);
}

export string prefix(string* s, int length) {
  return s^.substring(0, length);
}

export bool starts_with(string* s, string* prefix) {
  if (prefix^.size() > s^.size())
    return false;
  for (c : *prefix)
    if (*c != s^[c.index])
      return false;
  return true;
}

export bool ends_with(string* s, string* suffix) {
  if (suffix^.size() > s^.size())
    return false;
  for (c : *suffix)
    if (*c != s^[s^.size() - 1 - c.index])
      return false;
  return true;
}

export string insert(string* s, int start, string content) {
  return s->substring(0, start) + move(content) + s->substring(start, s->size() - start);
}

export int? find(string* s, string* pattern) {
  return s->find(0, pattern);
}

export int? find(string* s, int start, string* pattern) {
  const matches = [&](int index) {
    for (i : range(0, pattern->size()))
      if (s^[index + i] != pattern^[i])
        return false;
    return true;
  };
  for (i : range(start, s->size() - pattern->size() + 1))
    if (matches(i))
      return i;
  return null;
}

export string replace(string* s, string* pattern, string* by) {
  embed_returns {
    std::regex r(pattern->data());
    auto ret = std::regex_replace(s->data(), r, by->data());
    return zenon_string::owned(ret.data());
  }
}

export char operator [](string* s, int index) {
  embed_returns {
    return (*s)[index];
  }
}

export char[] slice(string* s) {
  embed_returns {
    return slice_t<char>{&s->data()[0], &s->data()[s->size()]};
  }
}

export int get_hash(string* s) {
  return s->slice().get_hash();
}

embed {
#include <cstdlib>
}

export int? to_int(string* s) {
  const int? err = null;
  if (s->empty())
    return err;
  embed_returns {
    char* control;
    int result = std::strtol(s->data(), &control, 0);
    if (control != s->data() + s->size())
      return err;
    return result;
  }
}

export double? to_double(string* s) {
  const double? err = null;
  if (s->empty())
    return err;
  embed_returns {
    char* control;
    double result = std::strtod(s->data(), &control);
    if (control != s->data() + s->size())
      return err;
    return result;
  }
}

export struct string_iterator {
  string* v;
  int index;
};

export string_iterator implicit_copy(string_iterator*) = default;

export string_iterator begin(string* s) {
  return string_iterator(s, 0);
}

export string_iterator end(string* s) {
  return string_iterator(s, s->size());
}

export char operator *(string_iterator* it) {
  return (*it->v)[it->index];
}

export string_iterator operator ++(string_iterator mutable* it) {
  ++it->index;
  return *it;
}

export bool operator == (string_iterator* it1, string_iterator* it2) {
  return it1->index == it2->index;
}

