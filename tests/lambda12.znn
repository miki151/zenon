// 13

template <T>
struct X {
  T elem;
};

struct Y {
  int b;
};

struct Z {
  Y y;
};

int invoke(Y* y, int x) {
  return y->b + x;
}

Y increase(Y* y) {
  return Y(y->b + 1);
}

X<Z> get(int a) {
  return X(Z(Y(a)));
}

int main() {
  mutable a = 5;
  const x = X([&]{ ++a; return a;});
  return x.elem().get().elem.y.increase()(a);
}
