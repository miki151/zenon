// 105

import "std/concepts.znn";

concept<A> Arithmetic {
  A operator + (A*, A*);
  A operator - (A*, A*);
  A operator - (A*);
  A operator + (A*);
  A operator * (A*, int a);
};

template <T, U> requires Arithmetic<T>, Arithmetic<U>
struct Vec {
  T x;
  U y;
};

template <T, U> requires Arithmetic<T>, Arithmetic<U>
Vec<T, U> operator + (Vec<T, U>* v1, Vec<T, U>* v2) {
  return Vec(v1->x + v2->x, v1->y + v2->y);
}

template <T, U> requires Arithmetic<T>, Arithmetic<U>
Vec<T, U> operator - (Vec<T, U>* v1, Vec<T, U>* v2) {
  return Vec(v1->x - v2->x, v1->y - v2->y);
}

template <T, U> requires Arithmetic<T>, Arithmetic<U>
Vec<T, U> operator * (Vec<T, U>* v, int a) {
  return Vec(v->x * a, v->y * a);
}

template <T, U> requires Arithmetic<T>, Arithmetic<U>
Vec<T, U> operator + (Vec<T, U>* v) {
  return Vec(+v->x, +v->y);
}

template <T, U> requires Arithmetic<T>, Arithmetic<U>
Vec<T, U> operator - (Vec<T, U>* v) {
  return Vec(-v->x, -v->y);
}

template <T> requires Arithmetic<T>
T getResult(T t1, T t2) {
  const t3 = t1 + t2;
  mutable t4 = -t3 * -5;
  return move(t4);
}

int main() {
  const v = getResult(Vec(1, 2), Vec(3, 4));
  return v.x + v.y + getResult(5, 6);
}
