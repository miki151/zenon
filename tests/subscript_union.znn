// 12

template<T>
union X {
  T elem;
  void isNull;
};

template<T> requires can_copy<T>
T operator[](X<T>* x, T a) {
  switch (*x) {
    case (elem) {
      return elem.copy();
    }
    case (isNull) {
      return move(a);
    }
  }
}

template<T>
struct Y {
  X<T> x;
};

X<int> fun() {
  return X<int>::elem(5);
}

int main() {
  const x = X<int>::elem(3);
  const y = Y<int>(X<int>::isNull());
  return 1 + x[1 + x[1 * 5]] + fun()[x[1] + 1] + y.x[1 + y.x[1] + 1];
}
