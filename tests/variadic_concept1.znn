// 6

concept<Ret, Args...> can_call {
  Ret f(Args...);
};

template <Ret, U> requires can_call<Ret, U, U>, copy<U>
Ret g(U u) {
  return f(copy(&u), copy(&u));
}

int f(string a, string b) {
  return a.size() + b.size();
}

int main() {
  return g<int>("pok");
}
