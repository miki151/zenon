// 6

import "std/math.znn";
import "std/vector.znn";

template <T>
struct Circle {
  int radius;
};

template <T>
int operator [](Circle<T>* c, int index) {
  return c->radius;
}

struct Rectangle {
  int width;
  int height;
};

int operator [](Rectangle* r, int index) {
  return r->width;
}

struct Triangle {
  int edge1;
  int edge2;
  int edge3;
};

int operator [](Triangle* t, int index) {
  return t->edge1;
}

template <T>
union Shape {
  Triangle triangle;
  Rectangle rectangle;
  T circle;
};

concept <T> ShapeInterface {
  int operator[](T*, int);
};

template <T> requires ShapeInterface<T>
int operator [](virtual Shape<T>* s, int index);

int main() {
  mutable v = vector<Shape<Circle<bool>>>();
  v.push_back(Shape<Circle<bool>>::triangle(Triangle(1, 5, 5)));
  v.push_back(Shape<Circle<bool>>::rectangle(Rectangle(2, 4)));
  v.push_back(Shape<Circle<bool>>::circle(Circle<bool>(3)));
  mutable ret = 0;
  for (i = 0; i < v.size(); ++i)
    ret += v[i][123];
  return ret;
}
