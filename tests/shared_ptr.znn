// 3

embed {
#include <memory>
using std::shared_ptr;
}

template <T>
extern struct shared_ptr;

template <T>
shared_ptr<T> copy(shared_ptr<T>* s) {
  embed_returns {
    return *s;
  }
}

template <T>
T mutable* get(shared_ptr<T> mutable* ptr) {
  embed_returns {
    return ptr->get();
  }
}

template <T>
T* get(shared_ptr<T>* ptr) {
  embed_returns {
    return ptr->get();
  }
}

template <T>
shared_ptr<T> shared(T t) {
  embed_returns {
    return std::make_shared<T>(std::move(t));
  }
}

int main() {
  const ptr = shared(3);
  const ptr2 = ptr.copy();
  return *ptr2.get();
}
