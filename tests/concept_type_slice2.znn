// 12

import "std/vector.znn";

concept <T> C {
  int f(T*);
  void s(T mutable*, int);
  void destruct(T*);
};

struct X {
  int a;
};

int f(X* x) { return x->a; }

int get(C[] c) {
  mutable ret = 0;
  for (it : c)
    ret += it->f();
  return ret;
}

void s(X mutable* x, int a) {
  x->a = a;
}

void set(C mutable[] c, int a) {
  for (it : c)
    it->s(a);
}

int main() {
  mutable v = vector<C>();
  const C c1 = X(1);
  v.push_back(move(c1));
  const C c2 = X(3);
  v.push_back(move(c2));
  const C c3 = X(5);
  v.push_back(move(c3));
  set(v.slice(), 4);
  return get(v.slice());
}
