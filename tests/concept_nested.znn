// 2

concept<T> CanAdd {
  T operator + (T* t1, T* t2);
};

concept<T> CanAdd2 {
  T operator + (T* t1, T* t2);
};

template <A> requires CanAdd2<A>
void times2(A mutable* a) {
  *a = *a + *a;
}

template <A> requires CanAdd<A>
struct S {
  A a;
};

template <A> requires CanAdd<A>
void t2(S<A> mutable* s) {
  times2(&s->a);
}

int main() {
  mutable s = S<int>(1);
  s.t2();
  return s.a;
}
