// 54

import "std/vector.znn";

concept <T> C1 {
  int f(T*);
  void destruct(T*);
};

struct X {
};

int f(X*) {
  return 5;
}

struct Y {
  int value;
};

int f(Y* y) {
  return y->value;
}

int main() {
  mutable v = vector<C1>();
  for (i : range(0, 3)) {
    const C1 e = X();
    v.push_back(move(e));
  }
  for (i : range(3, 6)) {
    const C1 e = Y(i);
    v.push_back(move(e));
  }
  mutable res = 0;
  for (it : v)
    res += it->f();
  for (i : range(0, v.size()))
    res += v[i].f();
  return res;
}
