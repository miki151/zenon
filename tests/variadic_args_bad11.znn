// no_compile

int eat(int i) { return i; }
int eat(bool b) { if (b) return 1; else return 0; }
int eat(string) { return 20; }
int eat(char) {return 10; }

concept<T> can_eat {
  int eat(T);
};

int eat_all() { return 0; }

template <T, Args...> requires can_eat<T>, can_eat<Args>...
int eat_all(T arg1, Args... args) {
  return eat(move(arg1)) + eat_all(move(args)...);
}

struct X {};

int main() {
  return eat_all(5, true, "pok", 'a', X());
}
