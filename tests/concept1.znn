// 3

import "std/concepts.znn";

concept<T, U, V> CanAdd {
  V add(T* t, U u);
};

struct S {
};

S copy(S*) = default;

int add(S* s, bool a) {
  if (a)
    return 1;
  else
    return 2;
}

template <A, B, C> requires CanAdd<A, B, C>, copy<B>
C add2(A a, mutable B b) {
  return a.add(move(b));
}

template <A1, B1, C1> requires CanAdd<A1, B1, C1>
struct S2 {
};

template <A1, B1, C1> requires CanAdd<A1, B1, C1>
S2<A1, B1, C1> copy(S2<A1, B1, C1>*) = default;

template <A, B, C> requires CanAdd<A, B, C>, copy<B>
C add3(S2<A, B, C> s, A a, mutable B b) {
  return a.add(move(b));
}

void fun(S2<S, bool, int> s) {
}

int main() {
  const s = S();
  S2<S, bool, int> s2 = S2<S, bool, int>();
  return add2<S, bool, int>(s.copy(), false) + s2.copy().add3(s.copy(), true);
}
