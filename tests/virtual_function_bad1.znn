// no_compile

import "std/math.znn";
import "std/vector.znn";

template <T>
struct Circle {
  int radius;
};

template <T>
int get(Circle<T> c, int) {
  return c.radius;
}

struct Rectangle {
  int width;
  int height;
};

int get(Rectangle r, int index) {
  return r.width;
}

struct Triangle {
  int edge1;
  int edge2;
  int edge3;
};

template <T>
concept ShapeInterface {
  int get(T, int);
};

template <T> requires ShapeInterface<T>
union Shape {
  Triangle triangle;
  Rectangle rectangle;
  T circle;
};

template <T> requires ShapeInterface<T>
int get(virtual Shape<T> s, int index);

int main() {
  mutable v = Shape<Circle<bool>>::rectangle(Rectangle(2, 4));
  return move(v).get(1);
}
