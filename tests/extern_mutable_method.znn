// no_compile

embed {

#include <vector>
using namespace std;

}

template <T>
extern struct vector;

template <T>
extern vector();

template <T>
extern vector(int cnt, T);

template <T>
void push_back(vector<T> mutable* v, T elem) {
  embed {
    v->push_back(std::move(elem));
  }
}

template <T>
T* at(vector<T>* v, int index) {
  embed_returns {
    return &v->at(index);
  }
}

template <T>
T mutable* at(vector<T> mutable* v, int index) {
  embed_returns {
    return v->at(index);
  }
}

template <T>
int size(vector<T>* v) {
  embed_returns {
    return v->size();
  }
}

int main() {
  const v = vector<int>();
  v.push_back(3);
  return v.size();
}

