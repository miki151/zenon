// 6

import "std/concepts.znn";

int f() {
  const a = A(5);
  const v = V<int>::isNull();
  const e = E::E1;
  return g();
}

A<int> a1() {
  return A(1);
}

int g() {
  if (false)
    return f();
  else
    return 1;
}

template <T>
struct A {
  T a;
};

template <T> requires can_copy<T>
A<T> copy(A<T>*) = default;

template <T> requires can_copy<T>
T m1(A<T>* a) {
  const c = A(same(a->a.copy()));
  if (1 == 1)
    return c.a.copy();
  else
    return a->m2();
}

template <T> requires can_copy<T>
T m2(A<T>* a) {
  if (1 == 2)
    return same(a->m1());
  else
    return getA(a->a.copy()).a;
}

/*E m3() {
  return E::E2;
}*/

template <T>
union V {
  void isNull;
  T elem;
};

template<T>
T same(mutable T a) {
  return move(a);
}

template<T>
A<T> getA(mutable T t) {
  return A(move(t));
}

enum E {
  E1,
  E2
};

int main() {
  const a = A<int>(5);
  return f() + a.m1();
}
