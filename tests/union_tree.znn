// 15

import "std/vector.znn";

template <T>
struct Leaf {
  T value;
};

template <T>
struct NonLeaf {
  vector<Node<T>> nodes;
};

template <T>
union Node {
  Leaf<T> leaf;
  NonLeaf<T> nonLeaf;
};

template <T>
Node<T> withChildren(mutable Node<T> a, mutable Node<T>b) {
  mutable children = vector<Node<T>>();
  children.push_back(move(a));
  children.push_back(move(b));
  return Node<T>::nonLeaf(NonLeaf(move(children)));
}

template <T>
Node<T> leaf(mutable T a) {
  return Node<T>::leaf(Leaf(move(a)));
}

concept <T> CanAdd {
  T operator + (T*, T*);
  T copy(T*);
};

template <T> requires CanAdd<T>
T calculateSum(Node<T>* node, T neutralElem) {
  switch (*node) {
    case (leaf) {
      return leaf.value.copy();
    }
    case (nonLeaf) {
      mutable T ret = neutralElem.copy();
      for (elem : nonLeaf.nodes)
        ret = ret + calculateSum(&*elem, neutralElem.copy());
      return move(ret);
    }
  }
}

int main() {
  const node = withChildren(
      withChildren(
          leaf(4),
          leaf(5)),
      leaf(6));
  return calculateSum(&node, 0);
}
