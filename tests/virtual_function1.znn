// 6

import "std/math.znn";
import "std/vector.znn";
import "std/concepts.znn";

template <T>
struct Circle {
  int radius;
};

template <T>
Circle<T> copy(Circle<T>*) = default;

template <T>
int get(Circle<T> c, int) {
  return c.radius;
}

struct Rectangle {
  int width;
  int height;
};

Rectangle copy(Rectangle*) = default;

int get(Rectangle r, int index) {
  return r.width;
}

struct Triangle {
  int edge1;
  int edge2;
  int edge3;
};

Triangle copy(Triangle*) = default;

template <T>
concept ShapeInterface {
  int get(T, int);
};

template <T> requires ShapeInterface<T>
union Shape {
  Triangle triangle;
  Rectangle rectangle;
  T circle;
};

template <T> requires copy<T>, ShapeInterface<T>
Shape<T> copy(Shape<T>*) = default;

template <T> requires ShapeInterface<T>
int get(virtual Shape<T> s, int index) {
  return 1;
}

int main() {
  mutable v = vector<Shape<Circle<bool>>>();
  v.push_back(Shape<Circle<bool>>::triangle(Triangle(1, 5, 5)));
  v.push_back(Shape<Circle<bool>>::rectangle(Rectangle(2, 4)));
  v.push_back(Shape<Circle<bool>>::circle(Circle<bool>(3)));
  mutable ret = 0;
  for (i = 0; i < v.size(); ++i)
    ret += v[i].copy().get(123);
  return ret;
}
