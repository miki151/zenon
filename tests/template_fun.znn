// 5


template<T>
void copy(T mutable* out, T in) {
  *out = move(in);
}

template<T>
union V {
  T elem;
  void isNull;
};

template<T>
T get(V<T> v, T def) {
  switch (move(v)) {
    case (elem) {
      return move(elem);
    }
    default {
      return move(def);
    }
  }
}

int main() {
  mutable V<int> v1 = V<int>::elem(7);
  mutable V<int> v2 = V<int>::isNull();
  mutable x = get(move(v1), 10) - get(.v = move(v2), .def = 5);
  copy(&x, x + 3);
  return x;
}
