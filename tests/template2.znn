// 2

import "std/concepts.znn";

template <Param>
union nullable {
  Param p;
  void isNull;
};

template <Param> requires copy<Param>
nullable<Param> copy(nullable<Param>* x) = default;

template <T>
nullable<T> isNull() {
  return nullable<T>::isNull();
}

template <T>
nullable<T> value(mutable T t) {
  return nullable<T>::p(move(t));
}

template <U, V>
union V2 {
  nullable<U> e1;
  nullable<V> e2;
};

template <U, V> requires copy<U>, copy<V>
V2<U, V> copy(V2<U, V>*) = default;

template <U, V> requires copy<U>, copy<V>
bool equal(V2<U,V>* v, U u) {
  V2<U,V> vTmp = v^.copy();
  switch (move(vTmp)) {
    case (e1) {
      switch (move(e1)) {
        case (isNull) {
          return false;
        }
        case (p) {
          return true;
        }
      }
    }
    case (e2) {
      return false;
    }
  }
}

template<T>
struct X {
  T elem;
};

template<T> requires copy<T>
X<T> copy(X<T>*) = default;

int main() {
  const z = X<int>(5);
  const x = value(z.copy());
  const y = value(X<bool>(true));
  const v2 = V2<X<int>,X<bool>>::e1(x.copy());
  mutable a = 1;
  if (equal(&v2, z.copy()))
    a = a + 1;
  return a;
}

