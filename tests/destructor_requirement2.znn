// 6

template <T> requires invoke<T, void>
struct X {
  T elem;
};

template <T> requires invoke<T, void>
void destruct(X<T>* x) {
  x->elem();
}

template <T>
concept can_plusplus {
  void operator++(T mutable*);
};

template <T> requires can_plusplus<T>
void f(T mutable* elem) {
  const a = X([&]{ ++(*elem);});
}

int main() {
  mutable x = 5;
  f(&x);
  return x;
}
